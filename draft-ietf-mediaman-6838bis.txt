



Network Working Group                                      M. Nottingham
Internet-Draft                                                Cloudflare
Obsoletes: [6838, 9694] (if approved)                         P. Resnick
Intended status: Best Current Practice                       27 May 2025
Expires: 28 November 2025


         Media Type Specifications and Registration Procedures
                   draft-ietf-mediaman-6838bis-latest

Abstract

   This document defines procedures for the specification and
   registration of media types for use in HTTP, MIME, and other Internet
   protocols.

About This Document

   This note is to be removed before publishing as an RFC.

   Status information for this document may be found at
   https://datatracker.ietf.org/doc/draft-ietf-mediaman-6838bis/.

   information can be found at https://datatracker.ietf.org/wg/mediaman/
   about/.

   Source for this draft and an issue tracker can be found at
   https://github.com/ietf-wg-mediaman/6838bis/.

Status of This Memo

   This Internet-Draft is submitted in full conformance with the
   provisions of BCP 78 and BCP 79.

   Internet-Drafts are working documents of the Internet Engineering
   Task Force (IETF).  Note that other groups may also distribute
   working documents as Internet-Drafts.  The list of current Internet-
   Drafts is at https://datatracker.ietf.org/drafts/current/.

   Internet-Drafts are draft documents valid for a maximum of six months
   and may be updated, replaced, or obsoleted by other documents at any
   time.  It is inappropriate to use Internet-Drafts as reference
   material or to cite them other than as "work in progress."

   This Internet-Draft will expire on 28 November 2025.

Copyright Notice

   Copyright (c) 2025 IETF Trust and the persons identified as the
   document authors.  All rights reserved.

   This document is subject to BCP 78 and the IETF Trust's Legal
   Provisions Relating to IETF Documents (https://trustee.ietf.org/
   license-info) in effect on the date of publication of this document.
   Please review these documents carefully, as they describe your rights
   and restrictions with respect to this document.  Code Components
   extracted from this document must include Revised BSD License text as
   described in Section 4.e of the Trust Legal Provisions and are
   provided without warranty as described in the Revised BSD License.

Table of Contents

   1.  Introduction
     1.1.  Conventions Used in This Document
   2.  Media Type Registration Requirements
     2.1.  Functionality
     2.2.  Publication
       2.2.1.  Specification Availability
       2.2.2.  Intellectual Property
     2.3.  Canonicalization and Interoperability
     2.4.  Naming
       2.4.1.  Aliases
     2.5.  Parameters
     2.6.  Encoding
     2.7.  Fragment Identifiers
     2.8.  Security
       2.8.1.  Structured Suffixes
     2.9.  Additional Information
     2.10. Non-Requirements
   3.  Top-Level Media Types
     3.1.  Text Media Types
       3.1.1.  The Charset Parameter
     3.2.  Image Media Types
     3.3.  Audio Media Types
     3.4.  Video Media Types
     3.5.  Application Media Types
     3.6.  Multipart and Message Media Types
     3.7.  Additional Top-Level Types
       3.7.1.  Required Criteria
       3.7.2.  Additional Considerations
       3.7.3.  Negative Criteria
   4.  Media Subtypes
     4.1.  Registration Trees
       4.1.1.  Standards Tree
       4.1.2.  Vendor Tree
       4.1.3.  Personal Tree
       4.1.4.  Unregistered x.  Tree
       4.1.5.  Additional Registration Trees
     4.2.  Subtype Suffixes
       4.2.1.  Common Suffix Patterns
       4.2.2.  Fragment Identifiers and Suffixes
   5.  Media Type Registration Procedures
     5.1.  Preliminary Community Review
     5.2.  Submit Request to IANA
       5.2.1.  Provisional Registrations
     5.3.  Review and Approval
     5.4.  Comments on Media Type Registrations
     5.5.  Change Procedures
     5.6.  Registration Template
   6.  Structured Syntax Suffix Registration Procedures
     6.1.  Change Procedures
     6.2.  Structured Syntax Suffix Registration Template
   7.  Security Considerations
   8.  IANA Considerations
   9.  Acknowledgments
   10. References
     10.1.  Normative References
     10.2.  Informative References
   Appendix A.  Historical Note
   Appendix B.  Grandfathered Media Types
   Authors' Addresses

1.  Introduction

   Internet application protocols (including but not limited to HTTP
   [RFC9110] and MIME [RFC2045]) are capable of carrying arbitrary
   labeled content.

   Those labels are known as media types.  A media type consists of a
   top-level type (Section 3) and a subtype (Section 4), which is
   further structured into a tree (identified by a prefix).  A subtype
   can also be associated with a structured syntax (identified by
   suffix).  Optionally, a media type can be defined to allow companion
   data, known as parameters.

   Section 2 defines the criteria for registering media types.
   Section 5 outlines the procedures used to do so.  The location of the
   media type registry is:

      http://www.iana.org/assignments/media-types/

   Section 6 outlines the procedures for managing the registry for
   structured suffixes.  It is located at:

      https://www.iana.org/assignments/media-type-structured-suffix/

1.1.  Conventions Used in This Document

   The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
   "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this
   document are to be interpreted as described in [RFC2119] when they
   appear in ALL CAPS.  They may also appear in lower or mixed case as
   plain English words, without any normative meaning.

   This specification makes use of the Augmented Backus-Naur Form (ABNF)
   [RFC5234] notation, including the core rules defined in Appendix B of
   that document.

2.  Media Type Registration Requirements

   Media type registrations are expected to conform to various
   requirements laid out in the following sections.  Note that specific
   requirements can vary depending on the registration tree
   (Section 4.1).

   Additional requirements specific to the registration of XML media
   types are specified in [RFC7303].

2.1.  Functionality

   Media types MUST function as actual media formats.  Registration of
   things that are better thought of as a transfer encoding, as a
   charset, or as a collection of separate entities of another type, is
   not allowed.  For example, although applications exist to decode the
   base64 transfer encoding [RFC2045], base64 cannot be registered as a
   media type.

   This requirement applies regardless of the registration tree
   involved.

2.2.  Publication

   Media types registered in the standards tree by the IETF MUST be
   published as RFCs.  Media types registered in the vendor and personal
   trees can be published as RFCs, but this is not required.

   Standards-tree registrations for media types defined by other
   standards-related organizations MUST be described by a formal
   specification produced by that organization.

   Other than IETF registrations in the standards tree, the registration
   of a media type does not imply endorsement, approval, or
   recommendation by the IANA or the IETF or even certification that the
   specification is adequate.

   Registration of a new top-level type requires Standards Action in the
   IETF and, hence, the publication of a RFC on the Standards Track.

2.2.1.  Specification Availability

   A permanent and readily available public specification of the format
   for the media type MUST exist for all types registered in the
   standards tree.  This specification MUST provide sufficient detail so
   that interoperability between independent implementations using the
   media type is possible.  If not part of the media type registration
   proposal, this specification MUST be referenced by it.

   A specification need not be publicly available for media types
   registered in the vendor and personal trees.  Note, however, that the
   public availability of a specification will often make the difference
   between having a name reserved and having the potential for useful
   interoperation.

2.2.2.  Intellectual Property

   The registration of media types involving patented technology is
   permitted.  However, the restrictions set forth in BCP 79 [RFC8179]
   and BCP 78 [RFC5378] on the use of patented technology in IETF
   Standards Track protocols must be respected when the specification of
   a media type is part of a Standards Track protocol.  In addition,
   other standards-related organizations making use of the standards
   tree may have their own rules regarding intellectual property that
   must be observed in their registrations.

   Intellectual Property Rights (IPR) disclosures for registrations in
   the vendor and personal trees are encouraged but not required.

   Copyright on the registration template MUST allow the IANA to copy it
   into the IANA registry.

2.3.  Canonicalization and Interoperability

   All registered media types MUST employ a single, canonical data
   format, regardless of registration tree.

   Ideally, media types will be defined so they interoperate across as
   many systems and applications as possible.  However, some media types
   will inevitably have problems interoperating across different
   platforms.  For example, problems with different versions, byte
   ordering, and specifics of gateway handling can arise.

   Universal interoperability of media types is not required, but known
   interoperability issues SHOULD be identified whenever possible.
   Publication of a media type does not require an exhaustive review of
   interoperability, and the interoperability considerations section is
   subject to continuing evaluation.

   The recommendations in this subsection apply regardless of the
   registration tree involved.

2.4.  Naming

   All registered media types MUST be assigned top-level type and
   subtype names.  The combination of these names serves to uniquely
   identify the media type, and the subtype name facet (or the absence
   of one) identifies the registration tree.  Both top-level type and
   subtype names are case-insensitive.

   Type and subtype names MUST conform to the following ABNF:

     type-name = restricted-name
     subtype-name = restricted-name

     restricted-name = restricted-name-first *126restricted-name-chars
     restricted-name-first  = ALPHA / DIGIT
     restricted-name-chars  = ALPHA / DIGIT / "!" / "#" /
                              "$" / "&" / "-" / "^" / "_"
     restricted-name-chars =/ "." ; Characters before first dot always
                                  ; specify a facet name
     restricted-name-chars =/ "+" ; Characters after last plus always
                                  ; specify a structured syntax suffix

   Note that this syntax is somewhat more restrictive than what is
   allowed by Section 5.1 of [RFC2045] or Section 4.2 of [RFC4288].
   Also note that while this syntax allows names of up to 127
   characters, implementation limits may make such long names
   problematic.  For this reason, 'type-name' and 'subtype-name' SHOULD
   be limited to 64 characters.

   Although this syntax treats "." as equivalent to any other character,
   characters before any initial "." always specify the registration
   facet.  Note that this means that facet-less standards tree
   registrations cannot use periods in the subtype name.

   Similarly, the final "+" in a subtype name introduces a structured
   syntax specifier suffix.  Structured syntax suffix requirements are
   specified in Section 4.2.

   While it is possible for a given media type to be assigned more than
   one name, the use of different names to identify the same media type
   is discouraged.

   These requirements apply regardless of the registration tree
   involved.

2.4.1.  Aliases

   In some cases, a single media type may have been widely deployed
   prior to registration under multiple names.  In such cases, a
   preferred name MUST be chosen for the media type, and applications
   MUST use this to be compliant with the type's registration.  However,
   a list of deprecated aliases by which the type is known MAY be
   supplied as additional information in order to assist applications in
   processing the media type properly.

2.5.  Parameters

   Media types MAY be defined to allow or require use of media type
   parameters.  Additionally, some parameters may be automatically made
   available to the media type by virtue of being a subtype of a content
   type that defines a set of parameters applicable to any of its
   subtypes.

   In either case, the names, values, and meanings of any parameters
   MUST be fully specified when a media type is registered in the
   standards tree, and SHOULD be specified as completely as possible
   when media types are registered in the vendor or personal trees.

   Parameter names have the same syntax as media type names and values:

       parameter-name = restricted-name

   Note that this syntax is somewhat more restrictive than what is
   allowed by the ABNF in [RFC2045] and amended by [RFC2231].

   Parameter names are case-insensitive and no meaning is attached to
   the order in which they appear.  It is an error for a specific
   parameter to be specified more than once.

   There is no defined syntax for parameter values; therefore, it MUST
   be specified upon registration.  Additionally, some transports impose
   restrictions on parameter value syntax, so care needs be taken to
   limit the use of potentially problematic syntaxes; for example,
   binary valued parameters, while permitted in some protocols, are best
   avoided.

   Note that a protocol can impose further restrictions on parameter
   value syntax, depending on how it chooses to represent parameters.
   Both MIME [RFC2045] [RFC2231] and HTTP [RFC9110] [RFC8187] allow
   binary parameters as well as parameter values expressed in a specific
   charset, but other protocols may be less flexible.

   Types already registered in the standards tree SHOULD NOT have new
   functionality added through the definition of new parameters
   subsequent to the original registration.  New parameters MAY be used
   to convey additional information that does not otherwise change
   existing functionality.  An example of this would be a "revision"
   parameter to indicate a revision level of an external specification
   such as JPEG.  Similar behavior is encouraged for media types
   registered in the vendor or personal trees, but is not required.

   Changes to parameters (including the introduction of new ones) is
   managed in the same manner as other changes to the media type; see
   Section 5.5.

2.6.  Encoding

   Some transports impose restrictions on the type of data they can
   carry.  For example, Internet mail traditionally was limited to 7bit
   US-ASCII text.  Encoding schemes are often used to work around such
   transport limitations.

   An "encoding considerations" field is provided to note what sort of
   data a media type can consist of as part of its registration.
   Possible values of this field are:

   7bit:  The content of the media type consists solely of CRLF-
      delimited 7bit US-ASCII text.

   8bit:  The content of the media type consists solely of CRLF-
      delimited 8bit text.

   binary:  The content consists of an unrestricted sequence of octets.

   framed:  The content consists of a series of frames or packets
      without internal framing or alignment indicators.  Additional out-
      of-band information is needed to interpret the data properly,
      including but not limited to knowledge of the boundaries between
      successive frames and knowledge of the transport mechanism.  Note
      that media types of this sort cannot be stored in a file or
      transported as a stream of octets without further context;
      therefore, such media types are thus unsuitable for use in many
      traditional protocols.  A commonly used transport with framed
      encoding is the Real-time Transport Protocol, RTP.  Additional
      rules for framed encodings defined for transport using RTP are
      given in [RFC4855].

   Additional restrictions on 7bit and 8bit text are given in
   Section 4.1.1 of [RFC2046].

2.7.  Fragment Identifiers

   Media type registrations can specify how applications should
   interpret fragment identifiers (specified in Section 3.5 of
   [RFC3986]) associated with the media type.

   Media types are encouraged to adopt fragment identifier schemes that
   are used with semantically similar media types.  In particular, media
   types that use a named structured syntax with a registered "+suffix"
   MUST follow whatever fragment identifier rules are given in the
   structured syntax suffix registration.

2.8.  Security

   All registrations of types in the standards tree MUST include an
   analysis of security issues.  A similar analysis for media types
   registered in the vendor or personal trees is encouraged but not
   required.

   All descriptions of security issues MUST be as accurate as possible
   regardless of registration tree.  In particular, the security
   considerations MUST NOT state that there are "no security issues
   associated with this type".  Security considerations for types in the
   vendor or personal tree MAY say that "the security issues associated
   with this type have not been assessed".

   There is no requirement that media types registered in any tree be
   secure or completely free from risks.  Nevertheless, all known
   security risks MUST be identified in the registration of a media
   type, again regardless of registration tree.

   The security considerations section of all registrations is subject
   to continuing evaluation and modification, and in particular MAY be
   extended by use of the "comments on media types" mechanism described
   in Section 5.4 below.

   Issues that need to be described in a security analysis of a media
   type include:

   *  Processing of complex media types might institute actions on a
      recipient's files or other resources.  If it is possible to
      specify arbitrary actions in an unrestricted fashion, it could
      have devastating effects.  See the registration of the
      application/postscript media type in [RFC2046] for an example of
      description and handling of these issues.

   *  Any security analysis MUST state whether or not the format employs
      such "active content"; if it does, it MUST state what steps have
      been taken (or are required be taken by applications) of the media
      type to protect users of the media type.

   *  Processing of complex media types might institute actions that,
      while not directly harmful to the recipient, may result in
      disclosure of information that either facilitates a subsequent
      attack or else violates a recipient's privacy in some way.  Again,
      the registration of the application/ postscript media type
      illustrates how such directives can be handled.

   *  A media type that employs compression may provide an opportunity
      for sending a small amount of data that, when received and
      evaluated, expands enormously to consume all of the recipient's
      resources.  All media types SHOULD state whether or not they
      employ compression; if they do, they SHOULD discuss what steps
      need to be taken to avoid such attacks.

   *  A media type might be targeted for applications that require some
      sort of security assurance but don't provide the necessary
      security mechanisms themselves.  For example, a media type could
      be defined for storage of sensitive medical information that in
      turn requires external confidentiality and integrity protection
      services, or which is designed for use only within a secure
      environment.  Types SHOULD always document whether or not they
      need such services in their security considerations.

2.8.1.  Structured Suffixes

2.8.1.1.  Document Validity

   If a toolchain chooses to process a provided media type by using the
   selected structured suffix processing rules, it cannot presume that a
   document that is valid per the decoding rules associated with the
   structured suffix will be valid for a recognized subset of the
   structured suffix.  For example, presuming a media type of
   "application/foo+bar", a toolchain cannot presume that a valid "+bar"
   document will also be a valid "application/foo" document.  On the
   other hand, presuming a media type of "application/foo+bar", a
   toolchain can presume that a valid "application/foo+bar" document
   will also be a valid "+bar" document.

2.8.1.2.  Fragment Semantics

   If a toolchain chooses to process a provided media type by using the
   selected structured suffix processing rules, it cannot presume that
   fragment identifier semantics will be the same across a recognized
   subset of the structured suffix.  For example, presuming a media type
   of "application/foo+bar", a toolchain cannot presume that the
   fragment semantics for a "+bar" document will be the same as for an
   "application/foo+bar" document.

2.8.1.3.  Security Characteristics

   Toolchains cannot assume that the security characteristics of
   processing based on structured suffixes will be the same for the
   entire media type.  For example, presuming a media type of
   "application/foo+bar", a toolchain cannot presume that the security
   characteristics for a "+bar" document will be the same as for a
   "application/foo+bar" document.

2.8.1.4.  Partial Processing

   It is conceivable that an attacker could utilize structured suffixes
   in a way that tricks unsuspecting toolchains into skipping important
   security checks and allowing viruses to propagate.  For example, an
   attacker might utilize an "application/vnd.ms-
   excel.addin.macroEnabled.12+zip" structured suffix to trigger an
   unzip process that might then directly invoke Microsoft Excel,
   bypassing anti-virus tooling that would otherwise block a macro-
   enabled MS Excel file containing a virus of some kind from being
   scanned or opened.

   Enterprising attackers might take advantage of toolchains that
   partially process media types in this manner.  Toolchains that
   process media types based purely on a structured suffix need to
   ensure that further processing does not blindly trust the decoded
   data, and that proper magic header or file structure checking is
   performed, before allowing the decoded data to drive operations that
   might negatively impact the application environment or operating
   system.

2.9.  Additional Information

   The following optional information SHOULD be included in the
   specification of a media type if it is available:

   *  Magic number(s) (length, octet values).  Magic numbers are byte
      sequences that are always present at a given place in the file and
      thus can be used to identify entities as being of a given media
      type.

   *  File name extension(s) commonly used on one or more platforms to
      indicate that some file contains a given media type.

   *  macOS Uniform Type Identifier (a string), if it makes sense to
      exchange media of this type through user-triggered exchange
      mechanisms such as copy-and-paste or drag-and-drop on macOS and
      related platforms (see [MacOSUTIs] for definitions and syntax).

   *  Windows clipboard name (a string), if it makes sense to exchange
      media of this type through user-triggered exchange mechanisms such
      as copy-and-paste or drag-and-drop on Microsoft Windows and
      related platforms (see [windowsClipboardNames] for definitions and
      syntax).

   In the case of a registration in the standards tree, this additional
   information MAY be provided in the formal specification of the media
   type format.  It is suggested that this be done by incorporating the
   IANA media type registration form into the specification itself.

2.10.  Non-Requirements

   Universal support and implementation of a media type are NOT a
   requirement for registration.

   In some environments such as mail, information on the capabilities of
   the remote mail agent is frequently not available to the sender.
   When this is the case, maximum interoperability might be attained by
   restricting the media types used to those "common" formats expected
   to be widely implemented.

   In the past, this reasoning was used to limit the number of possible
   media types, and resulted in a registration process with a
   significant hurdle and delay for those registering media types.
   However, the need for "common" media types does not require limiting
   the registration of new media types.  If a limited set of media types
   is recommended for a particular application, that should be asserted
   by a separate applicability statement specific for that environment.

   If a media type is explicitly intended for limited use, this MUST be
   noted in its registration.  The "Restrictions on Usage" field is
   provided for this purpose.

3.  Top-Level Media Types

   The choice of top-level type MUST take into account the nature of
   media type involved.  New subtypes of top-level types MUST conform to
   the restrictions of the top-level type, if any.

   The following sections describe each of the initial set of top-level
   types and their associated restrictions.  Additionally, various
   protocols, including but not limited to HTTP and MIME, MAY impose
   additional restrictions on the media types they can transport.  (See
   [RFC2046] for additional information on the restrictions MIME
   imposes.)

3.1.  Text Media Types

   A top-level type of "text" indicates that the content is principally
   textual in form.

   Text that does not provide for or allow formatting commands, font
   attribute specifications, processing instructions, interpretation
   directives, or content markup is known as "plain text".  Plain text
   is seen simply as a linear sequence of characters, possibly
   interrupted by line breaks or page breaks.  Plain text MAY allow the
   stacking of several characters in the same position in the text.
   Plain text in scripts like Arabic and Hebrew may also include
   facilities that allow the arbitrary mixing of text segments with
   different writing directions.

   Beyond plain text, there are many formats for representing what might
   be known as "rich text".  An interesting characteristic of many such
   representations is that they are to some extent readable even without
   the software that interprets them.  It is useful to distinguish them,
   at the highest level, from such unreadable data as images, audio, or
   text represented in an unreadable form.  In the absence of
   appropriate interpretation software, it is reasonable to present
   subtypes of "text" to the user, while it is not reasonable to do so
   with most non-textual data.  Such formatted textual data can be
   represented using subtypes of "text".

3.1.1.  The Charset Parameter

   Many subtypes of text, notably including the subtype "text/plain",
   which is a generic subtype for plain text defined in [RFC2046],
   define a "charset" parameter.  If a "charset" parameter is defined
   for a particular subtype of text, it MUST be used to specify a
   charset name defined in accordance to the procedures laid out in
   [RFC2978].

   As specified in [RFC6657], a "charset" parameter SHOULD NOT be
   specified when charset information is transported inside the payload
   (e.g., as in "text/xml").

   If a "charset" parameter is specified, it SHOULD be a required
   parameter, eliminating the options of specifying a default value.  If
   there is a strong reason for the parameter to be optional despite
   this advice, each subtype MAY specify its own default value, or
   alternatively, it MAY specify that there is no default value.
   Finally, the "UTF-8" charset [RFC3629] SHOULD be selected as the
   default.  See [RFC6657] for additional information on the use of
   "charset" parameters in conjunction with subtypes of text.

   Regardless of what approach is chosen, all new text/* registrations
   MUST clearly specify how the charset is determined; relying on the
   US-ASCII default defined in Section 4.1.2 of [RFC2046] is no longer
   permitted.  If explanatory text is needed, this SHOULD be placed in
   the additional information section of the registration.

3.2.  Image Media Types

   A top-level type of "image" indicates that the content is one or more
   individual images.  The subtype names the specific image format.

3.3.  Audio Media Types

   A top-level type of "audio" indicates that the content is audio data.
   The subtype names the specific audio format.

3.4.  Video Media Types

   A top-level type of "video" indicates that the content is a time-
   varying-picture image, possibly with color and coordinated sound.
   The term 'video' is used in its most generic sense, rather than with
   reference to any particular technology or format, and is not meant to
   preclude subtypes such as animated drawings encoded compactly.

   Note that although in general the mixing of multiple kinds of media
   in a single body is discouraged [RFC2046], it is recognized that many
   video formats include a representation for synchronized audio and/or
   text, and this is explicitly permitted for subtypes of "video".

3.5.  Application Media Types

   A top-level type of "application" indicates that the content is
   discrete data that do not fit under any of the other type names, and
   particularly for data to be processed by some type of application
   program.  This is information that must be processed by an
   application before it is viewable or usable by a user.

   Expected uses for the "application" type name include but are not
   limited to file transfer, spreadsheets, presentations, scheduling
   data, and languages for "active" (computational) material.  (The
   last, in particular, can pose security problems that must be
   understood by implementors.  The "application/postscript" media type
   registration in [RFC2046] provides a good example of how to handle
   these issues.)

   For example, a meeting scheduler might define a standard
   representation for information about proposed meeting dates.  An
   intelligent user agent would use this information to conduct a dialog
   with the user, and might then send additional material based on that
   dialog.  More generally, there have been several "active" languages
   developed in which programs in a suitably specialized language are
   transported to a remote location and automatically run in the
   recipient's environment.  Such applications may be defined as
   subtypes of the "application" top-level type.

   The subtype of "application" will often either be the name or include
   part of the name of the application for which the data are intended.
   This does not mean, however, that any application program name may
   simply be used freely as a subtype of "application"; the subtype
   needs to be registered.

3.6.  Multipart and Message Media Types

   A top-level type of "multipart" or "message" indicates that the
   content is a composite type; that is, they provide a means of
   encapsulating zero or more objects, each one a separate media type.

   All subtypes of multipart and message MUST conform to the syntax
   rules and other requirements specified in [RFC2046] and amended by
   Section 3.5 of [RFC6532].

3.7.  Additional Top-Level Types

   In some cases, a new media type may not be easily classified under
   any currently defined top-level type names.  Such cases are expected
   to be quite rare.  However, if such a case does arise, a new type
   name can be defined to accommodate it.  Definition of a new top-level
   type name MUST be done via a Standards Track RFC, taking into account
   the criteria and guidelines given below; no other mechanism can be
   used to define additional type names.

3.7.1.  Required Criteria

   Definitions of new top-level types are required to fulfil the
   following criteria:

   *  Every new top-level type MUST be defined in a Standards Track RFC
      (see Section 4.9 of [RFC8126]).  This will make sure there is
      sufficient community interest, review, and consensus appropriate
      for a new top-level type.

   *  The IANA Considerations section of an RFC defining a new top-level
      type MUST request that IANA add this new top-level type to the
      registry of top-level types.

   *  The criteria for what types do and do not fall under the new top-
      level type MUST be defined clearly.  Clear criteria are expected
      to help expert reviewers to evaluate whether a subtype belongs
      below the new type or not, and whether the registration template
      for a subtype contains the appropriate information.  If the
      criteria cannot be defined clearly, this is a strong indication
      that whatever is being talked about is not suitable as a top-level
      type.

   *  Any RFC defining a new top-level type MUST clearly document the
      security considerations applying to all or a significant subset of
      subtypes.

   *  At the minimum, one subtype MUST be described.  A top-level type
      without any subtype serves no purpose.  Please note that the
      'example' top-level describes a subtype 'example'.

3.7.2.  Additional Considerations

   Additional considerations for the definition of a new top-level type
   include:

   *  Existing wide use of an unregistered top-level type may be an
      indication of a need, and therefore an argument for formally
      defining a new top-level type.  On the other hand, the use of
      unregistered top-level types is highly discouraged.

   *  Use of an IETF Working Group to define a new top-level type is not
      needed, but may be advisable in some cases.  There are examples of
      new top-level type definitions without a Working Group
      ([RFC2077]), with a short, dedicated WG ([RFC8081]), and with a
      Working Group that included other related work
      ([I-D.ietf-mediaman-haptics]).

   *  The document defining the new top-level type should include
      initial registrations of actual subtypes.  The exception may be a
      top-level type similar to 'example'.  This will help to show the
      need for the new top-level type, will allow checking the
      appropriateness of the definition of the new top-level type, will
      avoid separate work for registering an initial slate of subtypes,
      and will provide examples of what is considered a valid subtype
      for future subtype registrations.

   *  The registration and actual use of a certain number of subtypes
      under the new top-level type should be expected.  The existence of
      a single subtype should not be enough; it should be clear that new
      similar types may appear in the future.  Otherwise, the creation
      of a new top-level type is likely unjustified.

   *  The proposers of the new top-level type and the wider community
      should be willing to commit to emitting and consuming the new top-
      level type in environments that they control.

   *  The fact that a group of (potential) types have (mostly) common
      parameters may be an indication that these belong under a common
      new top-level type.

   *  Top-level types can help humans with understanding and debugging.
      Therefore, evaluating how a new top-level type helps humans
      understand types may be crucial.

   *  Common restrictions may apply to all subtypes of a top-level type.
      Examples are the restriction to CRLF line endings for subtypes of
      type 'text' (at least in the context of electronic mail), or on
      subtypes of type 'multipart'.

   *  Top-level types are also used frequently in dispatching code.  For
      example "multipart/*" is frequently handled as multipart/mixed,
      without understanding of a specific subtype.  The top-level types
      'image', 'audio', and 'video' are also often handled generically.
      Documents with these top-level types can be passed to applications
      handling a wide variety of image, audio, or video formats.  HTML
      generating applications can select different HTML elements (e.g.
      <img> or <audio>) for including data of different top-level types.
      Applications can select different icons to represent unknown types
      in different top-level types.

3.7.3.  Negative Criteria

   Negative indicators for creation of a new top-level type include:

   *  Media types are not a general type system.  A top-level type MUST
      NOT be defined if its main or only purpose is to map other type
      systems, protocol elements, or registration spaces.  Examples of
      such discouraged uses include mapping media types to programming
      language primitives, ontologies, object identifiers, URIs and URI
      schemes, and file extensions.  That said, media types MAY use
      parameters to carry such information.  For example, information on
      a file extension '.dcat' can be encoded as 'application/octet-
      string; filename=foo.dcat'.

   *  A new top-level type SHOULD NOT generate aliases for existing
      widely used types or subtypes.

   *  Top-level types with an "X-" prefix cannot be registered, and
      SHOULD NOT be used.  See [RFC6648].

4.  Media Subtypes

4.1.  Registration Trees

   To increase the efficiency and flexibility of the registration
   process, different structures of subtype names can be registered in
   "trees," distinguished with faceted name prefixes.

   For example, a subtype that is recommended for wide support and
   implementation by the Internet community would be registered in the
   standards tree and not have a prefix, while a subtype that is used to
   move files associated with proprietary software would be registered
   in the vendor tree, and so its name would begin with a "vnd." prefix.

   Note that some previously defined media types do not conform to the
   naming conventions described below; see Appendix B.

4.1.1.  Standards Tree

   The standards tree is intended for those media types that require a
   substantive review and approval process in a recognized standards-
   related organization.  For media types that do not require such a
   process, see the vendor and personal trees.

   Registrations in the standards tree MUST be either:

   1.  approved directly by the IESG (in the case of registrations
       associated with IETF specifications, ), or

   2.  registered by a recognized standards-related organization using
       the "Specification Required" IANA registration policy Section 4.6
       of [RFC8126] (which implies Expert Review), or

   3.  approved by the Designated Expert(s) as identifying a "community
       format", as described in Section 4.1.1.1.

   The first procedure is used for registrations from IETF Consensus
   documents, or in rare cases when registering a grandfathered (see
   Appendix B) and/or otherwise incomplete registration is in the
   interest of the Internet community.  See Section 2.2 for publication
   requirements.

   In the second case, the IESG makes a one-time decision on whether the
   registration submitter represents a recognized standards-related
   organization; after that, registration requests are performed as
   specified in Section 5.3.  The format MUST be described by a formal
   specification produced by the submitting standards-related
   organization.

   The third case is described in Section 4.1.1.1.

   Media types in the standards tree MUST NOT have faceted names, unless
   they are grandfathered in using the process described in Appendix B.

   The change controller of a media type registered in the standards
   tree is assumed to be the standards-related organization itself.
   Modification or alteration of the specification uses the same level
   of processing (e.g., a registration submitted on Standards Track can
   be revised in another Standards Track RFC, but cannot be revised in
   an Informational RFC) required for the initial registration.

4.1.1.1.  Community Formats in the Standards Tree

   Some formats are interoperable (i.e., they are supported by more than
   one implementation), but their specifications are not published by a
   recognized standards-related organization.  To accommodate these
   cases, the Designated Expert(s) are empowered to approve
   registrations in the standards tree that meet the following criteria:

   *  There is a well-defined specification for the format

   *  That specification is not tied to or heavily associated with one
      implementation

   *  The specification is freely available at a stable location

   *  There are multiple interoperable implementations of the
      specification, or they are likely to emerge

   *  The requested name is appropriate to the use case, and not so
      generic that it may be considered 'squatting'

   *  There is no conflict with IETF work or work at other recognised
      SDOs (present or future)

   *  There is evidence of broad adoption

   The Designated Expert(s) have discretion in applying these criteria;
   in rare cases, they might judge it best to register an entry that
   fails one or more.

   Note that such registrations still go through preliminary community
   review (Section 5.1), and decisions can be appealed (Section 5.3).

4.1.2.  Vendor Tree

   The vendor tree is intended for media types associated with publicly
   available products.  "Vendor" and "producer" are construed very
   broadly in this context, and are considered equivalent.

   A registration may be placed in the vendor tree by anyone who needs
   to interchange files associated with some product or set of products.
   However, the registration properly belongs to the vendor or
   organization producing the software that employs the type being
   registered, and that vendor or organization can at any time elect to
   assume change control of a registration done by a third party in
   order to correct or update it.  See Section 5.5 for additional
   information.

   When a third party registers a type on behalf of someone else, both
   entities SHOULD be noted in the Change Controller field in the
   registration.  One possible format for this would be "Foo, on behalf
   of Bar".

   Vendor tree registrations are distinguished by the leading facet
   "vnd.".  That may be followed, at the discretion of the registrant,
   by either a media subtype name from a well-known producer (e.g.,
   "vnd.mudpie") or by an IANA-approved designation of the producer's
   name that is followed by a media type or product designation (e.g.,
   vnd.bigcompany.funnypictures).

   While public exposure and review of media types to be registered in
   the vendor tree are not required, requesting review on the media-
   types@ietf.org mailing list is encouraged, to improve the quality of
   those specifications.

   Registrations in the vendor tree may be submitted directly to the
   IANA, where they will undergo Expert Review Section 4.5 of [RFC8126]
   prior to approval.

4.1.3.  Personal Tree

   The personal tree is intended for media types created experimentally
   or as part of products that are not distributed commercially.  This
   tree is sometimes referred to as the "vanity" tree.

   Personal tree registrations are distinguished by the leading facet
   "prs.".

   The change controller of a "personal" registration is the person or
   entity making the registration, or one to whom responsibility has
   been transferred as described below.

   While public exposure and review of media types to be registered in
   the personal tree are not required, requesting review on the media-
   types@ietf.org mailing list is encouraged, to improve the quality of
   those specifications.

   Registrations in the personal tree may be submitted directly to the
   IANA, where they will undergo Expert Review Section 4.5 of [RFC8126]
   prior to approval.

4.1.4.  Unregistered x.  Tree

   Subtype names with "x." as the first facet are intended exclusively
   for use in private, local environments.  Subtypes using this tree
   cannot be registered and are intended for use only with the active
   agreement of the parties exchanging them.

   The low barrier to registration in the vendor and personal trees
   means it should rarely, if ever, be necessary to use unregistered
   types.  Therefore, use of types in the "x." tree is strongly
   discouraged.

   Note that types with names beginning with "x-" are no longer
   considered to be members of this tree (see [RFC6648]).  Also note
   that if a generally useful and widely deployed type incorrectly uses
   an "x-" name prefix, it MAY be registered using its current name in
   an alternative tree by following the procedure defined in Appendix B.

4.1.5.  Additional Registration Trees

   New top-level registration trees may be created by IETF Standards
   Action.

   It is explicitly assumed that these trees might be created for
   external registration and management by well-known permanent
   organizations; for example, scientific societies might register media
   types specific to the sciences they cover.  In general, the quality
   of review of specifications for one of these additional registration
   trees is expected to be equivalent to registrations in the standards
   tree by a recognized standards-related organization.

   When the IETF performs such review, it needs to consider the greater
   expertise of the requesting organization with respect to the subject
   media type.

4.2.  Subtype Suffixes

   [RFC6838] standardized a suffix convention for well-known structured
   syntaxes.  In particular, media types have been registered with
   suffixes such as "+der", "+fastinfoset", and "+json".

   A structured suffix is defined as all of the characters to the right
   of the left-most "+" sign in a media type, including the left-most
   "+" sign itself.  The structured suffix MUST NOT contain more than
   one "+" sign.  As an example, given the "application/foo+bar" media
   type: "application" is the top-level type, "foo" is the base subtype
   name, and "+bar" is the structured suffix.  A media type such as
   "application/foo+bar+baz" is not allowed.

   The primary guideline for whether a structured type name suffix is
   registrable is that it be described by a readily available
   description, preferably within a document published by an established
   standards-related organization, and for which there's a reference
   that can be used in a Normative References section of an RFC.

   Media types that make use of a named structured syntax SHOULD use the
   appropriate registered "+suffix" for that structured syntax when they
   are registered.  By the same token, media types MUST NOT be given
   names incorporating suffixes for structured syntaxes they do not
   actually employ. "+suffix" constructs for as-yet unregistered
   structured syntaxes SHOULD NOT be used, given the possibility of
   conflicts with future suffix definitions.

   Media types that make use of a named structured syntax, or similar
   separator such as a dash "-", MUST ensure that the registration is
   semantically aligned, from a data model perspective, with existing
   base subtype names in the media type registry.  For example, for the
   media types "application/foo+bar" and "application/foo+baz", the
   expectation is that the semantics suggested by the base subtype name
   "application/foo" are the same between both media types.  The
   Designated Expert MUST reject a registration if they believe the
   semantics for a media type registration does not align with existing
   base subtype names in the media type registry.

   Registrants MUST prove to the Designated Expert, such as through an
   email to a public mailing list or issue tracker comment, that they
   have consent from the existing change controller for the associated
   base subtype name to register the new media type.

4.2.1.  Common Suffix Patterns

   There are a few common patterns that are utilized for media types
   that use structured suffixes.  These patterns include expressing that
   the data associated with a media type:

   *  Utilizes a structured data format such as "+xml", "+json",
      "+yaml", or "+cbor".

   *  Is compressed using a binary compression format such as "+zip" or
      "+gzip".

   *  Is encoded in a digitally signature format such as "+jwt" or
      "+cose".

   While it is conceivable that suffixes such as "+xml+zip" are
   possible, such usage is NOT RECOMMENDED due to the large number of
   combinatorial possibilities that could occur and the negative impact
   that might have on security considerations for toolchains that
   attempt to safely process all of the possibilities.

4.2.2.  Fragment Identifiers and Suffixes

   The syntax and semantics for fragment identifiers are specified in
   the "Fragment Identifier Considerations" column in the IANA
   Structured Syntax Suffixes registry.  In general, when processing
   fragment identifiers associated with a structured syntax suffix, the
   following rules SHOULD be followed:

   1.  For cases defined for the structured syntax suffix, where the
       fragment identifier does resolve per the structured syntax suffix
       rules, then proceed as specified by the specification associated
       with the "Fragment Identifier Considerations" column in the IANA
       Structured Syntax Suffixes registry.

   2.  For cases defined for the structured syntax suffix, where the
       fragment identifier does not resolve per the structured syntax
       suffix rules, then proceed as specified by the specification
       associated with the full media type.

   3.  For cases not defined for the structured syntax suffix, then
       proceed as specified by the specification associated with the
       full media type.

5.  Media Type Registration Procedures

   The media type registration procedure is not a formal standards
   process, but rather an administrative procedure intended to allow
   community comment and sanity checking without excessive time delay.

   Normal IETF processes need to be followed for all IETF registrations
   in the standards tree.  The posting of an Internet Draft is a
   necessary first step, followed by posting to the media-types@ietf.org
   list as discussed below.

5.1.  Preliminary Community Review

   Notice of a potential media type registration in the standards tree
   SHOULD be sent to the media-types@ietf.org mailing list for review.
   Registrations in other trees MAY be sent to the list for review as
   well; doing so is entirely OPTIONAL, but is strongly encouraged.

   The purpose of this notification is to solicit comments and feedback
   on the choice of type/subtype name, the unambiguity of the references
   with respect to versions and external profiling information, and a
   review of any interoperability or security considerations.  The
   submitter may submit a revised registration proposal or abandon the
   registration completely and at any time.

5.2.  Submit Request to IANA

   Media types registered in the standards tree by the IETF itself MUST
   be reviewed and approved by the IESG as part of the normal standards
   process.

   Standards-tree registrations by recognized standards-related
   organizations as well as registrations in the vendor and personal
   trees are submitted directly to the IANA, unless other arrangements
   were made as part of a liaison agreement.

   Registration requests can be sent to iana@iana.org.  A web form for
   registration requests is also available at:

      http://www.iana.org/form/media-types

5.2.1.  Provisional Registrations

   Standardization processes often take considerable time to complete.
   In order to facilitate prototyping and testing, it is often helpful
   to assign media types early in the process.  This way, identifiers
   used during standards development can remain unchanged once the
   process is complete, and implementations and documentation do not
   have to be updated.

   Accordingly, provisional registrations of media type names in the
   standards tree MAY be submitted to IANA.  The only required fields in
   such registrations are the media type name and contact information
   (including the standards-related organization name).

   Upon receipt of a provisional registration, IANA will check the name
   and contact information, then publish the registration in a distinct,
   publicly-visible provisional registration list.

   Provisional registrations MAY be updated or abandoned at any time.
   When the registration is abandoned, the media type is no longer
   registered in any sense; it can subsequently be registered just like
   any other unassigned media type name.

5.3.  Review and Approval

   With the exception of provisional standards-tree registrations,
   registrations submitted to the IANA will be first given to the media
   types reviewer, who is appointed by the IETF Applications Area
   Director(s).  The media types reviewer examines registration requests
   to make sure they meet the requirements set forth in this document.

   Decisions made by the media types reviewer may be appealed to the
   IESG using the procedure specified in Section 6.5.4 of [RFC2026].

   Once a media type registration has passed review, the IANA will
   register the media type and make the media type registration
   available to the community.

   In the case of standards-tree registrations from other standards-
   related organizations, IANA will also check that the submitter is in
   fact a recognized standards-related organization.  If the submitter
   is not currently recognized as such, the IESG will be asked to
   confirm their status.  Recognition from the IESG MUST be obtained
   before a standards-tree registration can proceed.

5.4.  Comments on Media Type Registrations

   Comments on registered media types may be submitted by members of the
   community to the IANA at iana@iana.org.  These comments will be
   reviewed by the media types reviewer and then passed on to the change
   controller of the media type if possible.

   Submitters of comments may request that their comment be attached to
   the media type registration itself; if the IANA, in consultation with
   the media types reviewer, approves, the comment will be made
   accessible in conjunction with the type registration.

5.5.  Change Procedures

   Once a media type has been published by the IANA, the change
   controller may request a change to its definition.  The same
   procedure that would be appropriate for the original registration
   request is used to process a change request.

   Media type registrations may not be deleted; media types that are no
   longer believed appropriate for use can be declared OBSOLETE by a
   change to their "intended use" field.

   Significant changes to a media type's definition should be requested
   only when there are serious omissions or errors in the published
   specification.  When review is required, a change request may be
   denied if it renders entities that were valid under the previous
   definition invalid under the new definition.

   The change controller of a media type may pass responsibility to
   another person or agency by informing the IANA; this can be done
   without discussion or review.

   The IESG may reassign responsibility for a media type.  The most
   common case of this will be to enable changes to be made to types
   where the author of the registration has died, fallen out of contact,
   or is otherwise unable to make changes that are important to the
   community.

5.6.  Registration Template

   Type name:

   Subtype name:

   Required parameters:

   Optional parameters:

   Encoding considerations:

   Security considerations:

   Interoperability considerations:

   Published specification:

   Applications that use this media type:

   Fragment identifier considerations:

   Additional information:
      Deprecated alias names for this type:

      Magic number(s):

      File extension(s):

      Macintosh file type code(s):

   Person & email address to contact for further information:

   Intended usage:
      (One of COMMON, LIMITED USE, or OBSOLETE.)

   Restrictions on usage:
      (Any restrictions on where the media type can be used go here.)

   Author:

   Change controller:

   Provisional registration? (standards tree only):  Yes/No

   (Any other information that the author deems interesting may be added
   below this line.)

   "N/A", written exactly that way, can be used in any field if desired
   to emphasize the fact that it does not apply or that the question was
   not omitted by accident.  Do not use 'none' or other words that could
   be mistaken for a response.

   Limited-use media types should also note in the applications list
   whether or not that list is exhaustive.

6.  Structured Syntax Suffix Registration Procedures

   Someone wishing to define a "+suffix" name for a structured syntax
   for use with a new media type registration SHOULD:

   1.  Check IANA's registry of media type name suffixes to see whether
       or not there is already an entry for that well-defined structured
       syntax.

   2.  If there is no entry for their suffix scheme, fill out the
       template (specified in Section 6.2) and include that with the
       media type registration.  The template may be contained in an
       Internet Draft, alone or as part of some other protocol
       specification.  The template may also be submitted in some other
       form (as part of another document or as a stand-alone document),
       but the contents will be treated as an "IETF Contribution" under
       the guidelines of BCP 78 [RFC5378].

   3.  Send a copy of the template or a pointer to the containing
       document (with specific reference to the section with the
       template) to the mailing list media-types@ietf.org, requesting
       review.  This may be combined with a request to review the media
       type registration.  Allow a reasonable time for discussion and
       comments.

   4.  Respond to review comments and make revisions to the proposed
       registration as needed to bring it into line with the guidelines
       given in this document.

   5.  Submit the (possibly updated) registration template (or pointer
       to the document containing it) to IANA at iana@iana.org.

   Upon receipt of a structured syntax suffix registration request,

   1.  IANA checks the submission for completeness; if sections are
       missing or citations are not correct, IANA rejects the
       registration request.

   2.  IANA checks the current registry for an entry with the same name;
       if such a registry exists, IANA rejects the registration request.

   3.  IANA requests Expert Review of the registration request against
       the corresponding guidelines.

   4.  The Designated Expert may request additional review or
       discussion, as necessary.

   5.  If Expert Review recommends registration, IANA adds the
       registration to the appropriate registry.

   The initial registry content specification [RFC6839] provides
   examples of structured syntax suffix registrations.

6.1.  Change Procedures

   Registrations may be updated in each registry by the same mechanism
   as required for an initial registration.  In cases where the original
   definition of the scheme is contained in an IESG-approved document,
   update of the specification also requires IESG approval.

6.2.  Structured Syntax Suffix Registration Template

   This template describes the fields that must be supplied in a
   structured syntax suffix registration request:

   Name
      Full name of the well-defined structured syntax.

   +suffix
      Suffix used to indicate conformance to the syntax.

   References
      Include full citations for all specifications necessary to
      understand the structured syntax.

   Encoding considerations
      A full citation to a section in a specification that provides
      general guidance regarding encoding considerations for any type
      employing this syntax.  The same requirements for media type
      encoding considerations given in Section 2.6 apply here.

   Interoperability considerations
      A full citation to a section in a specification that documents any
      issues regarding the interoperable use of types employing this
      structured syntax should be given here.  Examples would include
      the existence of incompatible versions of the syntax, issues
      combining certain charsets with the syntax, or incompatibilities
      with other types or protocols.

   Fragment identifier considerations
      A full citation to a section in a specification that documents the
      generic processing rules of fragment identifiers for any type
      employing this syntax should be described here.

   Security considerations
      A full citation to a section in a specification that provides
      security considerations shared by media types employing this
      structured syntax must be specified here.  The same requirements
      for media type security considerations given in Section 2.8 apply
      here, with the exception that the option of not assessing the
      security considerations is not available for suffix registrations.

   Contact
      Person (including contact information) to contact for further
      information.

   Author/Change controller.
      Person (including contact information) authorized to change this
      suffix registration.

7.  Security Considerations

   Security requirements for both media type and media type suffix
   registrations are discussed in Section 2.8.

8.  IANA Considerations

   _None Yet._

9.  Acknowledgments

   The current authors would like to acknowledge their debt to the late
   Dr. Jon Postel, whose general model of IANA registration procedures
   and specific contributions shaped the predecessors of this document
   [RFC2048] [RFC4288].  We hope that the current version is one with
   which he would have agreed but, as it is impossible to verify that
   agreement, we have regretfully removed his name as a co-author.

   Randy Bush, Francis Dupont, Bjoern Hoehrmann, Barry Leiba, Murray
   Kucherawy, Alexey Melnikov, S.  Moonesamy, Mark Nottingham, Tom
   Petch, Peter Saint-Andre, and Jeni Tennison provided many helpful
   review comments and suggestions.

10.  References

10.1.  Normative References

   [RFC2045]  Freed, N. and N. Borenstein, "Multipurpose Internet Mail
              Extensions (MIME) Part One: Format of Internet Message
              Bodies", RFC 2045, DOI 10.17487/RFC2045, November 1996,
              <https://www.rfc-editor.org/rfc/rfc2045>.

   [RFC2046]  Freed, N. and N. Borenstein, "Multipurpose Internet Mail
              Extensions (MIME) Part Two: Media Types", RFC 2046,
              DOI 10.17487/RFC2046, November 1996,
              <https://www.rfc-editor.org/rfc/rfc2046>.

   [RFC2119]  Bradner, S., "Key words for use in RFCs to Indicate
              Requirement Levels", BCP 14, RFC 2119,
              DOI 10.17487/RFC2119, March 1997,
              <https://www.rfc-editor.org/rfc/rfc2119>.

   [RFC2978]  Freed, N. and J. Postel, "IANA Charset Registration
              Procedures", BCP 19, RFC 2978, DOI 10.17487/RFC2978,
              October 2000, <https://www.rfc-editor.org/rfc/rfc2978>.

   [RFC3629]  Yergeau, F., "UTF-8, a transformation format of ISO
              10646", STD 63, RFC 3629, DOI 10.17487/RFC3629, November
              2003, <https://www.rfc-editor.org/rfc/rfc3629>.

   [RFC3986]  Berners-Lee, T., Fielding, R., and L. Masinter, "Uniform
              Resource Identifier (URI): Generic Syntax", STD 66,
              RFC 3986, DOI 10.17487/RFC3986, January 2005,
              <https://www.rfc-editor.org/rfc/rfc3986>.

   [RFC4855]  Casner, S., "Media Type Registration of RTP Payload
              Formats", RFC 4855, DOI 10.17487/RFC4855, February 2007,
              <https://www.rfc-editor.org/rfc/rfc4855>.

   [RFC5234]  Crocker, D., Ed. and P. Overell, "Augmented BNF for Syntax
              Specifications: ABNF", STD 68, RFC 5234,
              DOI 10.17487/RFC5234, January 2008,
              <https://www.rfc-editor.org/rfc/rfc5234>.

   [RFC5378]  Bradner, S., Ed. and J. Contreras, Ed., "Rights
              Contributors Provide to the IETF Trust", BCP 78, RFC 5378,
              DOI 10.17487/RFC5378, November 2008,
              <https://www.rfc-editor.org/rfc/rfc5378>.

   [RFC6532]  Yang, A., Steele, S., and N. Freed, "Internationalized
              Email Headers", RFC 6532, DOI 10.17487/RFC6532, February
              2012, <https://www.rfc-editor.org/rfc/rfc6532>.

   [RFC6648]  Saint-Andre, P., Crocker, D., and M. Nottingham,
              "Deprecating the "X-" Prefix and Similar Constructs in
              Application Protocols", BCP 178, RFC 6648,
              DOI 10.17487/RFC6648, June 2012,
              <https://www.rfc-editor.org/rfc/rfc6648>.

   [RFC6657]  Melnikov, A. and J. Reschke, "Update to MIME regarding
              "charset" Parameter Handling in Textual Media Types",
              RFC 6657, DOI 10.17487/RFC6657, July 2012,
              <https://www.rfc-editor.org/rfc/rfc6657>.

   [RFC7303]  Thompson, H. and C. Lilley, "XML Media Types", RFC 7303,
              DOI 10.17487/RFC7303, July 2014,
              <https://www.rfc-editor.org/rfc/rfc7303>.

   [RFC8126]  Cotton, M., Leiba, B., and T. Narten, "Guidelines for
              Writing an IANA Considerations Section in RFCs", BCP 26,
              RFC 8126, DOI 10.17487/RFC8126, June 2017,
              <https://www.rfc-editor.org/rfc/rfc8126>.

   [RFC8179]  Bradner, S. and J. Contreras, "Intellectual Property
              Rights in IETF Technology", BCP 79, RFC 8179,
              DOI 10.17487/RFC8179, May 2017,
              <https://www.rfc-editor.org/rfc/rfc8179>.

   [RFC9110]  Fielding, R., Ed., Nottingham, M., Ed., and J. Reschke,
              Ed., "HTTP Semantics", STD 97, RFC 9110,
              DOI 10.17487/RFC9110, June 2022,
              <https://www.rfc-editor.org/rfc/rfc9110>.

10.2.  Informative References

   [I-D.ietf-mediaman-haptics]
              Muthusamy, Y. K. and C. Ullrich, "The 'haptics' Top-level
              Media Type", Work in Progress, Internet-Draft, draft-ietf-
              mediaman-haptics-05, 27 July 2023,
              <https://datatracker.ietf.org/doc/html/draft-ietf-
              mediaman-haptics-05>.

   [MacOSUTIs]
              Apple Computer, Inc., "Framework: Uniform Type
              Identifiers", March 2024,
              <https://developer.apple.com/documentation/
              uniformtypeidentifiers>.

   [RFC2026]  Bradner, S., "The Internet Standards Process -- Revision
              3", BCP 9, RFC 2026, DOI 10.17487/RFC2026, October 1996,
              <https://www.rfc-editor.org/rfc/rfc2026>.

   [RFC2048]  Freed, N., Klensin, J., and J. Postel, "Multipurpose
              Internet Mail Extensions (MIME) Part Four: Registration
              Procedures", RFC 2048, DOI 10.17487/RFC2048, November
              1996, <https://www.rfc-editor.org/rfc/rfc2048>.

   [RFC2077]  Nelson, S., Parks, C., and Mitra, "The Model Primary
              Content Type for Multipurpose Internet Mail Extensions",
              RFC 2077, DOI 10.17487/RFC2077, January 1997,
              <https://www.rfc-editor.org/rfc/rfc2077>.

   [RFC2231]  Freed, N. and K. Moore, "MIME Parameter Value and Encoded
              Word Extensions: Character Sets, Languages, and
              Continuations", RFC 2231, DOI 10.17487/RFC2231, November
              1997, <https://www.rfc-editor.org/rfc/rfc2231>.

   [RFC4288]  Freed, N. and J. Klensin, "Media Type Specifications and
              Registration Procedures", RFC 4288, DOI 10.17487/RFC4288,
              December 2005, <https://www.rfc-editor.org/rfc/rfc4288>.

   [RFC6838]  Freed, N., Klensin, J., and T. Hansen, "Media Type
              Specifications and Registration Procedures", BCP 13,
              RFC 6838, DOI 10.17487/RFC6838, January 2013,
              <https://www.rfc-editor.org/rfc/rfc6838>.

   [RFC6839]  Hansen, T. and A. Melnikov, "Additional Media Type
              Structured Syntax Suffixes", RFC 6839,
              DOI 10.17487/RFC6839, January 2013,
              <https://www.rfc-editor.org/rfc/rfc6839>.

   [RFC8081]  Lilley, C., "The "font" Top-Level Media Type", RFC 8081,
              DOI 10.17487/RFC8081, February 2017,
              <https://www.rfc-editor.org/rfc/rfc8081>.

   [RFC8187]  Reschke, J., "Indicating Character Encoding and Language
              for HTTP Header Field Parameters", RFC 8187,
              DOI 10.17487/RFC8187, September 2017,
              <https://www.rfc-editor.org/rfc/rfc8187>.

   [windowsClipboardNames]
              MicroSoft Inc., "Clipboard Formats", August 2020,
              <https://learn.microsoft.com/en-us/windows/win32/dataxchg/
              clipboard-formats>.

Appendix A.  Historical Note

   The media type registration process was initially defined for
   registering media types for use in the context of the asynchronous
   Internet mail environment.  In this mail environment, there is a need
   to limit the number of possible media types, to increase the
   likelihood of interoperability when the capabilities of the remote
   mail system are not known.  As media types are used in new
   environments in which the proliferation of media types is not a
   hindrance to interoperability, the original procedure proved
   excessively restrictive and had to be generalized.  This was
   initially done in [RFC2048], but the procedure defined there was
   still part of the MIME document set.  The media type specification
   and registration procedure is now a separate document, to make it
   clear that it is independent of MIME.

   It may be desirable to restrict the use of media types to specific
   environments or to prohibit their use in other environments.  This
   specification incorporates such restrictions into media type
   registrations in a systematic way.  See Section 2.10 for additional
   discussion.

Appendix B.  Grandfathered Media Types

   Some media types registered prior to 1996 with unfaceted subtype
   names, would, if registered under the guidelines in this document, be
   given a faceted name and placed into either the vendor or personal
   trees.  Reregistration of those types to reflect the appropriate
   trees is encouraged but not required.  Ownership and change control
   principles outlined in this document apply to those types as if they
   had been registered in those trees.

   There may also be cases where a media type with an unfaceted subtype
   name has been widely deployed without being registered.  (Note that
   this includes subtype names beginning with the "x-" prefix.)  If
   possible, such a media type SHOULD be reregistered with a proper
   faceted subtype name, possibly using a deprecated alias to identify
   the original name (see Section 2.4.1).

   However, if this is not possible, the type can, subject to approval
   by both the media types reviewer and the IESG, be registered in the
   proper tree with its unfaceted name.

Authors' Addresses

   Mark Nottingham
   Cloudflare
   Prahran
   Australia
   Email: mnot@mnot.net
   URI:   https://www.mnot.net/


   Pete Resnick
   Email: resnick@episteme.net
